/*
*	Proyecto de pruebas de Gabriel. El mal código introducido será castigado con la muerte.
*	Quedas avisado.
*/

#include "raylib.h"

#include "colisiones.h"

#include <sstream>

float SCREEN_WIDTH = 1280;
float SCREEN_HEIGHT = 720;



struct Bounds
{
	Rectangle top, bot, left, right;
	Bounds()
	{
		top = { 50, 50, SCREEN_WIDTH - 100, 2 };
		bot = { 50, SCREEN_HEIGHT - 50, SCREEN_WIDTH - 100, 2 };
		left = { 50, 50, 2, SCREEN_HEIGHT - 100 };
		right = { SCREEN_WIDTH - 50, 50, 2, SCREEN_HEIGHT - 100 };
	}
	void Draw()
	{
		DrawRectangleRec(top, YELLOW);
		DrawRectangleRec(bot, ORANGE);
		DrawRectangleRec(left, GREEN);
		DrawRectangleRec(right, SKYBLUE);
	}
} bounds;

template <typename ShapeType>
struct Collider
{
	ShapeType shape;
	Vector2 dir;
	float radians;
	Color color;

	template <typename OtherShapeType1/*, typename OtherShapeType2*/>
	void Update(Bounds bounds, Collider<OtherShapeType1> other1/*, Collider<OtherShapeType2> other2*/)
	{
		shape.x += dir.x;
		shape.y += dir.y;

		// QUADRANTS
		// 1: [0, PI/2]
		// 2: [PI/2, PI]
		// 3: [PI, 3PI/2]
		// 4: [3PI/2, 2PI]

		if (CollisionHelper::Collides(shape, bounds.top))
		{
			// 2, 1
			if (dir.x < 0) radians = GetRandomValue(PI * 100, PI * 150) / 100.0f;
			else radians = GetRandomValue(PI * 150, PI * 200) / 100.0f;
			dir = { std::cos(radians) * 5, -std::sin(radians) * 5 };
		}
		if (CollisionHelper::Collides(shape, bounds.bot))
		{
			// 3, 4
			if (dir.x < 0) radians = GetRandomValue(PI * 50, PI * 100) / 100.0f;
			else radians = GetRandomValue(0, PI * 50) / 100.0f;
			dir = { std::cos(radians) * 5, -std::sin(radians) * 5 };
		}
		if (CollisionHelper::Collides(shape, bounds.left))
		{
			// 4, 1
			if (dir.y > 0) radians = GetRandomValue(PI * 150, PI * 200) / 100.0f;
			else radians = GetRandomValue(0, PI * 50) / 100.0f;
			dir = { std::cos(radians) * 5, -std::sin(radians) * 5 };
		}
		if (CollisionHelper::Collides(shape, bounds.right))
		{
			// 3, 2
			if (dir.y > 0) radians = GetRandomValue(PI * 100, PI * 150) / 100.0f;
			else radians = GetRandomValue(PI * 50, PI * 100) / 100.0f;
			dir = { std::cos(radians) * 5, -std::sin(radians) * 5 };
		}
		if (CollisionHelper::Collides(shape, other1.shape)
			/*|| CollisionHelper::Collides(shape, other2.shape)*/) {
			dir.x = -dir.x;
			dir.y = -dir.y;
		}
	}
	void Draw()
	{
		if constexpr (std::is_same_v<ShapeType, Rectangle>)
		{
			DrawRectangleRec(shape, color);
		}
		else if constexpr (std::is_same_v<ShapeType, Circle>)
		{
			DrawCircle(shape.x, shape.y, shape.radius, color);
		}
		else if constexpr (std::is_same_v<ShapeType, Polygon>)
		{
			shape.DrawOutline(color);
		}
	}
};

int main() {
	InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "Prueba");
	SetTargetFPS(60);

	Collider<Rectangle> c1;
	c1.shape = { SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 100, 20 };
	c1.radians = (float)GetRandomValue(0, PI * 200) / 100.0f;
	c1.dir = { std::cos(c1.radians) * 5, std::sin(c1.radians) * 5 };
	c1.color = RED;

	Collider<Circle> c2;
	c2.shape = { SCREEN_WIDTH / 2 - 200, SCREEN_HEIGHT / 2 + 200, 50 };
	c2.radians = (float)GetRandomValue(0, PI * 200) / 100.0f;
	c2.dir = { std::cos(c2.radians) * 5, std::sin(c2.radians) * 5 };
	c2.color = BLUE;

	// Game Loop
	while (!WindowShouldClose())
	{
		// Update
		c1.Update(bounds, c2/*, c3*/);
		c2.Update(bounds, c1/*, c3*/);
		
		// Draw
		BeginDrawing();
		{
			// Clear
			ClearBackground(BLACK);

			/*
			std::stringstream text1;
			text1 << "Radians: " << c1.radians << "}\n"
				<< "cos: " << std::cos(c1.radians) << "}\n"
				<< "sin: " << std::sin(c1.radians) << "}\n"
				<< "dir: {" << c1.dir.x << "," << c1.dir.y << "}\n";

			std::stringstream text2;
			text2 << "Radians: " << c2.radians << "}\n"
				<< "cos: " << std::cos(c2.radians) << "}\n"
				<< "sin: " << std::sin(c2.radians) << "}\n"
				<< "dir: {" << c2.dir.x << "," << c2.dir.y << "}\n";

			DrawText(text1.str().c_str(), 100, 100, 20, RED);
			DrawText(text2.str().c_str(), 800, 100, 20, BLUE);
			*/

			// Bounds
			bounds.Draw();

			// Objects
			c1.Draw();
			c2.Draw();
		}
		EndDrawing();
	}

	CloseWindow();
}